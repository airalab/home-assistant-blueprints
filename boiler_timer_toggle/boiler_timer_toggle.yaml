blueprint:
  name: Boiler Toggle with Timer
  description: >
    Toggle a boiler and timer using an input_boolean.
    - ON: Turns on the boiler and starts the timer.
    - OFF: Turns off the boiler and cancels the timer.
    - When the timer finishes, boiler and input_boolean turn OFF automatically.
  domain: automation
  input:
    boiler_switch:
      name: Boiler Switch
      description: The switch that turns the boiler on/off.
      selector:
        entity:
          domain: switch
    timer_entity:
      name: Boiler Timer
      description: Timer entity that tracks boiler duration.
      selector:
        entity:
          domain: timer
    trigger_entity:
      name: Trigger Button
      description: input_boolean used to toggle the boiler.
      selector:
        entity:
          domain: input_boolean
    duration:
      name: Run Duration (minutes)
      description: Duration in minutes the boiler should run.
      default: 60
      selector:
        number:
          min: 1
          max: 120
          unit_of_measurement: minutes

trigger:
  - platform: state
    entity_id: !input trigger_entity
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: !input timer_entity

action:
  - variables:
      run_minutes: !input duration
      trigger_state: "{{ trigger.to_state.state if trigger.platform == 'state' else '' }}"
      is_timer_finished: "{{ trigger.platform == 'event' and trigger.event.data.entity_id == (inputs.timer_entity | string) }}"

  - choose:
      # CASE 1: User turned ON the input_boolean
      - conditions:
          - condition: template
            value_template: "{{ trigger_state == 'on' }}"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input boiler_switch
          - service: timer.start
            target:
              entity_id: !input timer_entity
            data:
              duration: >
                00:{{ '%02d' | format(run_minutes | int) }}:00

      # CASE 2: User turned OFF the input_boolean
      - conditions:
          - condition: template
            value_template: "{{ trigger_state == 'off' }}"
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input boiler_switch
          - service: timer.cancel
            target:
              entity_id: !input timer_entity

      # CASE 3: Timer finished
      - conditions:
          - condition: template
            value_template: "{{ is_timer_finished }}"
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input boiler_switch
          - service: input_boolean.turn_off
            target:
              entity_id: !input trigger_entity

mode: restart
